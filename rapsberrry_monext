import RPi.GPIO as GPIO #Importe la bibliothèque pour contrôler les GPIOs
import requests
import logging
import confiparser

config = configparser.ConfigParser() #initialisation du configparser pour lire le fichier de conf

config.read('config.ini') #ouvre le fichier de configuration

print(config.sections()) #pour verifier que le fichier de conf est bien ouvert


GPIO.setmode(GPIO.BOARD) #Définit le mode de numérotation (Board)
#GPIO.setwarnings(False) #On désactive les messages d'alerte

LED = config['port_de_sortie'].getint('Led') #Définit le numéro du port GPIO qui alimente la led

GPIO.setup(LED, GPIO.OUT) #Active le contrôle du GPIO

state = GPIO.input(LED) #Lit l'état actuel du GPIO, vrai si allumé, faux si éteint

url = config['Curl'].getstring('url')
headers = {config['Curl'].getstring('type_header'): config['Curl'].getstring('token')}
r = requests.get(url, headers=headers)#requette curl dans python

l=r.json()

def affiche_critical(l) : #permet de ne récupérer que les cas qui nous interresse 
    result=[] #après la requette cURL
    type_erreur = config['Filtre'].getstring('type_erreur') #recupere du fichier de conf les bonnes valeurs
    severity = config['Filtre'].getint('niveau_de_severite')
    for i in l :
        if (i['type']==type_erreur) and (i['severity']==severity) :
            result.append(i)
    return result

def allumage(l):
    logging.info('entré dans l allumage')
    if (len(l) != 0) not(state) : #si la liste n'est pas vide et la LED est éteinte alors il y a des alertes critical donc on allume
        logging.info('led allumé')
        GPIO.output(LED, GPIO.HIGH) #allumage de la LED
        return True
    if (len(l) == 0) and state :#si la liste est vide et la LED est allumé alors il n'y a plus d'alertes critical et donc on allume
        logging.info('led éteinte')
        GPIO.output(LED, GPIO.LOW)#extinction de la LED
        return False


allumage(affiche_critical(l))
